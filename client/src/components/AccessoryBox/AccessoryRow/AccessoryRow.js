import React, { Component } from 'react';
import { connect } from 'react-redux';
import AccessoryButtons from '../AccessoryButtons/AccessoryButtons';
import { updateAccessoryDb } from '../../../actions';

class AccessoryRow extends Component {
  state = {
    id: 0,
    title: '',
    sets: 0,
    reps: 0,
    weight: 0,
    currentlyEditing: false,
    loaded: false,
  };
  componentDidMount = async () => {
    //If row is generated by 'add accessory button', start in editing mode
    if (!this.props.id) {
      await this.setState({ currentlyEditing: true });
    }
    this.setState({ loaded: true });
  };

  addAcc = () => {
    const { title, sets, reps, weight } = this.state;
    const {
      dispatch,
      dayIndex,
      id,
      userAuth: { userId },
      accessories,
      accessories: { accessoryPlan },
    } = this.props;
    const payload = { title, sets, reps, weight, userId, dayIndex, id };
    dispatch(updateAccessoryDb(payload, 'add', accessories[accessoryPlan], accessoryPlan));
  };

  deleteAcc = () => {
    const {
      dispatch,
      dayIndex,
      id,
      userAuth: { userId },
      accessories,
      accessories: { accessoryPlan },
    } = this.props;
    const payload = { userId, id, dayIndex };
    dispatch(updateAccessoryDb(payload, 'delete', accessories[accessoryPlan], accessoryPlan));
  };

  editAcc = async () => {
    if (this.props.id === undefined) {
      this.addAcc();
      return;
    }
    if (this.state.currentlyEditing) {
      const {
        dispatch,
        userAuth: { userId },
        dayIndex,
        accessories,
        accessories: { accessoryPlan },
      } = this.props;
      const { title, sets, reps, weight, id } = this.state;
      const payload = { title, sets, reps, weight, id, userId, dayIndex };
      await dispatch(updateAccessoryDb(payload, 'edit', accessories[accessoryPlan], accessoryPlan));
      this.setState({ currentlyEditing: false });
    } else {
      const { title, sets, reps, weight, id } = this.props;
      this.setState({ currentlyEditing: true, title, sets, reps, weight, id });
    }
  };

  onChange = e => {
    const { name, value } = e.target;
    this.setState({ [name]: value });
  };

  render() {
    const { userAuth, title, sets, reps, weight, id } = this.props;
    return (
      <div className="accessory__item">
        {userAuth.loggedIn && this.state.loaded && (
          <AccessoryButtons
            deleteAcc={this.deleteAcc}
            addAcc={this.addAcc}
            editAcc={this.editAcc}
            id={id}
            clicked={this.state.currentlyEditing}
          />
        )}

        {this.state.currentlyEditing ? (
          <div className="accessory__item-content">
            <input onChange={this.onChange} type="text" name={'title'} value={this.state.title} />
            <div className="accessory__item-content-setrep">
              <input onChange={this.onChange} type="number" name={'sets'} value={this.state.sets} />
              <input onChange={this.onChange} type="number" name={'reps'} value={this.state.reps} />
            </div>
            <input
              onChange={this.onChange}
              type="number"
              name={'weight'}
              value={this.state.weight}
            />
          </div>
        ) : (
          <div className="accessory__item-content">
            <span>{title}</span>
            <span>
              {sets} x {reps}
            </span>
            <span>{weight}</span>
          </div>
        )}
      </div>
    );
  }
}

const mapStateToProps = state => ({
  accessories: state.accessories,
  userAuth: state.userAuth,
});

export default connect(mapStateToProps)(AccessoryRow);
